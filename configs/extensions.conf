[globals]
[general]
autofallthrough=yes

[default]
exten => _.,1,Verbose(received a call from ${CALLERID(num)} on extension ${EXTEN})
same => n,Set(HEADER=${SIP_HEADER(X-LineBlocs-Key)})
same => n,Set(USERID=${SIP_HEADER(X-LineBlocs-UserId)})
same => n,Verbose("Answer header shows ${HEADER}")
same => n,GotoIf($["${HEADER}" != ""]?end_it:start_call)
same => n(start_call),Goto(routing,${EXTEN},1)
same => n(end_it),Hangup()


[generic-in]
exten => _.,1,Verbose(routing thru generic-in)
same => n,Answer()
same => n,SIPAddHeader(X-LineBlocs-Key: $LINEBLOCS_KEY)
same => n,SIPAddHeader(X-LineBlocs-Caller: ${CALLERID(num)})
same => n,GotoIf($["${SIP_HEADER(X-LineBlocs-Fulfill-Type)}" = "user_sip_trunk"]?sip_trunk:)
same => n,GotoIf($["${SIP_HEADER(X-LineBlocs-Fulfill-Type)}" = "network_managed"]?network_managed:)
same => n,GotoIf($["${SIP_HEADER(X-LineBlocs-Fulfill-Type)}" = "byo_carrier"]?network_managed:)
same => n(sip_trunk),Stasis(lineblocs,INCOMING_SIP_TRUNK,${EXTEN},${CALLERID(num)},${SIP_HEADER(Call-ID)})
same => n(network_managed),Stasis(lineblocs,INCOMING_CALL,${EXTEN},${CALLERID(num)},${SIP_HEADER(Call-ID)})

[proxy-main-ws]
exten => _.,1,Verbose(calling using proxy out (WS))
same => n,Goto(routing,${EXTEN},1)

[proxy-main]
exten => _.,1,Verbose(calling using proxy out)
same => n,Goto(routing,${EXTEN},1)

[routing]
exten => _.,1,Verbose(routing called)
same => n,Set(DIRECTION=${SIP_HEADER(X-LineBlocs-Direction)})
same => n,Verbose(direction is ${DIRECTION})
same => n,Set(HEADER=${SIP_HEADER(X-LineBlocs-Accept-Call-Type)})
same => n,GotoIf($["${DIRECTION}" = "outgoing-proxy"]?extension:)
same => n,GotoIf($["${DIRECTION}" = "outgoing-proxy-trunk"]?outgoing_trunk:)
same => n,GotoIf($["${DIRECTION}" = "incoming-proxy"]?incoming:)
same => n(outgoing_trunk),Stasis(lineblocs,OUTGOING_TRUNK_CALL,${EXTEN},${CALLERID(num)},${SIP_HEADER(X-Lineblocs-Trunk-SourceIP)},${SIP_HEADER(Call-ID)})
same => n,Hangup()
same => n(extension),Verbose(extension route..)
same => n,Set(TYPE=${SIP_HEADER(X-LineBlocs-Call-Type)})
same => n,GotoIf($["${TYPE}" = "endpoint"]?endpoint:)
same => n,GotoIf($["${TYPE}" = "pstn"]?pstn:)
same => n,GotoIf($["${TYPE}" = "media"]?media:)
same => n(endpoint),Set(DOMAIN1=${CUT(SIP_HEADER(From),:,2)})
same => n,Set(DOMAIN2=${CUT(DOMAIN1,@,2)})
same => n,Set(DOMAIN3=${CUT(DOMAIN2,>,1)})
same => n,Set(DOMAIN=${DOMAIN3})
same => n,Verbose(SIPDOMAIN is ${DOMAIN})
same => n,Stasis(lineblocs,OUTGOING_PROXY_ENDPOINT,${EXTEN},${CALLERID(num)},${DOMAIN},${SIP_HEADER(Call-ID)})
same => n,Hangup()
same => n(pstn),Set(DOMAIN1=${CUT(SIP_HEADER(From),:,2)})
same => n,Set(DOMAIN2=${CUT(DOMAIN1,@,2)})
same => n,Set(DOMAIN3=${CUT(DOMAIN2,>,1)})
same => n,Set(DOMAIN=${DOMAIN3})
same => n,Verbose(SIPDOMAIN is ${DOMAIN})
same => n,Stasis(lineblocs,OUTGOING_PROXY,${EXTEN},${CALLERID(num)},${DOMAIN},${SIP_HEADER(X-LineBlocs-Fulfill-Type)},${SIP_HEADER(X-Lineblocs-User-SIP-Trunk-Addr)},${SIP_HEADER(Call-ID)})
same => n,Hangup()
same => n(media),Set(DOMAIN1=${CUT(SIP_HEADER(From),:,2)})
same => n,Set(DOMAIN2=${CUT(DOMAIN1,@,2)})
same => n,Set(DOMAIN3=${CUT(DOMAIN2,>,1)})
same => n,Set(DOMAIN=${DOMAIN3})
same => n,Verbose(SIPDOMAIN is ${DOMAIN})
same => n,Stasis(lineblocs,OUTGOING_PROXY_MEDIA,${EXTEN},${CALLERID(num)},${DOMAIN},${SIP_HEADER(Call-ID)})
same => n,Hangup()

same => n(incoming),Verbose(incoming DID route..)
same => n,Set(ACCEPT_TYPE=${SIP_HEADER(X-LineBlocs-Accept-Call-Type)})
# check for user SIP trunks
same => n,Set(FULFILL_TYPE=${SIP_HEADER(X-LineBlocs-Fulfill-Type)})
same => n,GotoIf($["${FULFILL_TYPE}" = "user_sip_trunk"]?voice_trunk:next_check)
same => n(voice_trunk),Set(TRUNK_ADDR=${SIP_HEADER(X-Lineblocs-User-SIP-Trunk-Addr)})
same => n,Stasis(lineblocs,INCOMING_SIP_TRUNK,${EXTEN},${CALLERID(num)},${TRUNK_ADDR},${SIP_HEADER(Call-ID)})
same => n(next_check),GotoIf($["${ACCEPT_TYPE}" = "voice"]?voice:)
same => n,GotoIf($["${ACCEPT_TYPE}" = "fax"]?fax:)
same => n(voice),Stasis(lineblocs,INCOMING_CALL,${EXTEN},${CALLERID(num)},${SIP_HEADER(Call-ID)})
same => n,Hangup()
same => n(fax),Verbose(incoming fax..)
same => n,Set(FAXDEST=/tmp) 
; put a timestamp on this call so the resulting file is unique
same => n,Set(tempfax=${STRFTIME(,,%C%y%m%d%H%M)}) 
same => n,Set(__FAX_NUMBER=${EXTEN})
same => n,ReceiveFax(${FAXDEST}/${tempfax}.tif)
exten => h,1,Verbose(fax ending testing..)
same => n,GotoIf($["${FAXSTATUS}" = ""]?do_hangup:)
same => n,Verbose(3,- Fax receipt completed with status: ${FAXSTATUS})
; *** This line should not have any line breaks
same => n,Set(FAX_PATH=${FAXDEST}/${tempfax})
same => n,Verbose(3,full fax path is ${FAX_PATH})
same => n(fax),Stasis(lineblocs,INCOMING_FAX,${FAX_NUMBER},${CALLERID(num)},${FAX_PATH},${FAXSTATUS},${SIP_HEADER(Call-ID)})
same => n(do_hangup),Hangup()